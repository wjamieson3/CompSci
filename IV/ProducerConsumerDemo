import java.util.ArrayList;
import java.util.List;
import java.util.Random;
import java.util.concurrent.locks.ReentrantLock;

public class Main {

	public static void main(String[] args) {
		List<String> buffer = new ArrayList<String>();

		ReentrantLock bufferLock = new ReentrantLock();

		MyProducer producer = new MyProducer(buffer, ThreadColor.ANSI_YELLOW, bufferLock);
		MyConsumer consumer1 = new MyConsumer(buffer, ThreadColor.ANSI_PURPLE, bufferLock);
		MyConsumer consumer2 = new MyConsumer(buffer, ThreadColor.ANSI_CYAN, bufferLock);

		new Thread(producer).start();
		new Thread(consumer1).start();
		new Thread(consumer2).start();
	}

}

class MyProducer implements Runnable {
	private List<String> buffer;
	private String color;
	private ReentrantLock bufferLock;

	public MyProducer(List<String> buffer, String color, ReentrantLock bufferLock) {
		this.buffer = buffer;
		this.color = color;
		this.bufferLock = bufferLock;
	}

	public void run() {
		Random random = new Random();
		String[] nums = { "1", "2", "3", "4", "5" };

		for (String num : nums) {

			try {
				// synchronized (buffer) {
				bufferLock.lock();
				try {
					System.out.println(color + "Adding..." + num);
					buffer.add(num);
				} finally {
					bufferLock.unlock();
				}
				// }

				Thread.sleep(random.nextInt(1000));
			} catch (InterruptedException e) {
				System.out.println("Producer was interrupted...");
			}
		}

		// synchronized (buffer) {
		System.out.println(color + "Adding EOF and exiting...");
		buffer.add("EOF");
		// }

	}
}

class MyConsumer implements Runnable {
	private List<String> buffer;
	private String color;
	private ReentrantLock bufferLock;

	public MyConsumer(List<String> buffer, String color, ReentrantLock bufferLock) {
		this.buffer = buffer;
		this.color = color;
		this.bufferLock = bufferLock;
	}

	@Override
	public void run() {

		while (true) {
			// synchronized (buffer) {

			if (bufferLock.tryLock()) {
				try {

					if (buffer.isEmpty()) {
						continue;
					}

					if (buffer.get(0).equals("EOF")) {
						System.out.println(color + "Exiting");
						break;
					} else {
						System.out.println(color + "Removed " + buffer.remove(0));
					}
				} finally {
					bufferLock.unlock();
				}
			}

			// }
		}
	}
}

class ThreadColor {
	public static final String ANSI_RESET = "\u001B[0m";
	public static final String ANSI_BLACK = "\u001B[30m";
	public static final String ANSI_RED = "\u001B[31m";
	public static final String ANSI_GREEN = "\u001B[32m";
	public static final String ANSI_YELLOW = "\u001b[33m";
	public static final String ANSI_BLUE = "\u001B[34m";
	public static final String ANSI_PURPLE = "\u001B[35m";
	public static final String ANSI_CYAN = "\u001B[36m";
	public static final String ANSI_WHITE = "\u001b[37m";
}
